--- old/src/pty.cc
+++ new/src/pty.cc
@@ -240,15 +240,6 @@
 		close(fd);
 	}
 
-        /* Now set the TERM environment variable */
-        /* FIXME: Setting environment here seems to have no effect, the merged envp2 will override on exec.
-         * By the way, we'd need to set the one from there, if any. */
-        g_setenv("TERM", VTE_TERMINFO_NAME, TRUE);
-
-        char version[7];
-        g_snprintf (version, sizeof (version), "%u", VTE_VERSION_NUMERIC);
-        g_setenv ("VTE_VERSION", version, TRUE);
-
 	/* Finally call an extra child setup */
 	if (m_extra_child_setup.func) {
 		m_extra_child_setup.func(m_extra_child_setup.data);
--- old/src/vtespawn.cc
+++ new/src/vtespawn.cc
@@ -445,7 +445,7 @@
 
   while ((c = *p++) != '\0')
     {
-      if (!g_ascii_isdigit (c))
+      if (c < '0' || c > '9')
         return -1;
       c -= '0';
 
@@ -460,6 +460,53 @@
 }
 #endif
 
+/* This function is called between fork and execve/_exit and so must be
+ * async-signal-safe; see man:signal-safety(7).
+ */
+static int
+getrlimit_NOFILE_max(void)
+{
+#ifdef HAVE_SYS_RESOURCE_H
+        struct rlimit rlim;
+
+#ifdef __linux__
+        if (prlimit(0 /* this PID */, RLIMIT_NOFILE, nullptr, &rlim) == 0 &&
+            rlim.rlim_max != RLIM_INFINITY)
+                return rlim.rlim_max;
+
+        /* fallback */
+#endif /* __linux__ */
+
+#ifdef __GLIBC__
+        /* Use getrlimit() function provided by the system if it is known to be
+         * async-signal safe.
+         *
+         * According to the glibc manual, getrlimit is AS-safe.
+         */
+        if (getrlimit(RLIMIT_NOFILE, &rlim) == 0 &&
+            rlim.rlim_max != RLIM_INFINITY)
+                return rlim.rlim_max;
+
+        /* fallback */
+#endif
+
+#endif /* HAVE_SYS_RESOURCE_H */
+
+#if defined(__FreeBSD__) || defined(__OpenBSD__)
+        /* Use sysconf() function provided by the system if it is known to be
+         * async-signal safe.
+         */
+        auto const r = sysconf(_SC_OPEN_MAX);
+        if (r != -1)
+                return r;
+
+        /* fallback */
+#endif
+
+        /* Hardcoded fallback: the default process hard limit in Linux as of 2020 */
+        return 4096;
+}
+
 #ifndef HAVE_FDWALK
 static int
 fdwalk (int (*cb)(void *data, int fd), void *data)
@@ -468,14 +515,9 @@
    * may be slow on non-Linux operating systems, especially on systems allowing
    * very high number of open file descriptors.
    */
-  gint open_max;
   gint fd;
   gint res = 0;
 
-#ifdef HAVE_SYS_RESOURCE_H
-  struct rlimit rl;
-#endif
-
 #ifdef __linux__
   /* Avoid use of opendir/closedir since these are not async-signal-safe. */
   int dir_fd = open ("/proc/self/fd", O_RDONLY | O_DIRECTORY);
@@ -509,14 +551,7 @@
 
 #endif
 
-#ifdef HAVE_SYS_RESOURCE_H
-
-  if (getrlimit(RLIMIT_NOFILE, &rl) == 0 && rl.rlim_max != RLIM_INFINITY)
-      open_max = rl.rlim_max;
-  else
-#endif
-      open_max = sysconf (_SC_OPEN_MAX);
-
+  auto const open_max = getrlimit_NOFILE_max();
   for (fd = 0; fd < open_max; fd++)
       if ((res = cb (data, fd)) != 0)
           break;
@@ -1071,7 +1106,7 @@
   {
     gchar **new_argv;
 
-    new_argv = g_new0 (gchar*, argc + 2); /* /bin/sh and NULL */
+    new_argv = g_newa (gchar*, argc + 2); /* /bin/sh and NULL */
     
     new_argv[0] = (char *) "/bin/sh";
     new_argv[1] = (char *) file;
@@ -1086,8 +1121,6 @@
       execve (new_argv[0], new_argv, envp);
     else
       execv (new_argv[0], new_argv);
-    
-    g_free (new_argv);
   }
 }
 
@@ -1147,7 +1180,7 @@
 
       len = strlen (file) + 1;
       pathlen = strlen (path);
-      freeme = name = (char*)g_malloc (pathlen + len + 1);
+      name = (char*)g_alloca (pathlen + len + 1);
       
       /* Copy the file name at the top, including '\0'  */
       memcpy (name + pathlen + 1, file, len);
@@ -1217,7 +1250,6 @@
                * something went wrong executing it; return the error to our
                * caller.
                */
-              g_free (freeme);
 	      return -1;
 	    }
 	}
@@ -1229,8 +1261,6 @@
          * error.
          */
         errno = EACCES;
-
-      g_free (freeme);
     }
 
   /* Return the error from the last attempt (probably ENOENT).  */
